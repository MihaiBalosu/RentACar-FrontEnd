{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { DealerLocation } from 'src/app/model/DealerLocation';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@agm/core\";\nfunction DealerEditorComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \" Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let DealerEditorComponent = /*#__PURE__*/(() => {\n  class DealerEditorComponent {\n    constructor(formBuilder, http) {\n      this.formBuilder = formBuilder;\n      this.http = http;\n      this.selectedLocation = new DealerLocation();\n    }\n    ngOnInit() {\n      this.dealerForm = this.formBuilder.group({\n        name: ['', Validators.required]\n        // Add other dealer form fields here\n      });\n    }\n\n    onMapClick(event) {\n      this.selectedLocation.latitude = event.coords.lat;\n      this.selectedLocation.longitude = event.coords.lng;\n      this.reverseGeocode(event.coords.lat, event.coords.lng);\n    }\n    reverseGeocode(latitude, longitude) {\n      const apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyCn3dK4iamN8xCBVJzVIvMwEbyRUdylRA4`;\n      this.http.get(apiUrl).subscribe(response => {\n        if (response.results.length > 0) {\n          const addressComponents = response.results[0].address_components;\n          const city = this.extractAddressComponent(addressComponents, 'locality');\n          const country = this.extractAddressComponent(addressComponents, 'country');\n          this.selectedLocation.city = city;\n          this.selectedLocation.country = country;\n        }\n      });\n    }\n    extractAddressComponent(components, type) {\n      for (const component of components) {\n        if (component.types.includes(type)) {\n          return component.long_name;\n        }\n      }\n      return '';\n    }\n    saveDealer() {\n      if (this.dealerForm.valid) {\n        const dealerData = Object.assign(Object.assign({}, this.dealerForm.value), {\n          location: this.selectedLocation\n        });\n        // Perform API call or any other saving logic with dealerData\n      }\n    }\n  }\n\n  DealerEditorComponent.ɵfac = function DealerEditorComponent_Factory(t) {\n    return new (t || DealerEditorComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n  DealerEditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DealerEditorComponent,\n    selectors: [[\"app-dealer-editor\"]],\n    decls: 13,\n    vars: 7,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\"], [4, \"ngIf\"], [2, \"height\", \"400px\", \"width\", \"100%\"], [3, \"latitude\", \"longitude\", \"mapClick\"], [3, \"latitude\", \"longitude\"], [\"type\", \"submit\", 3, \"disabled\"]],\n    template: function DealerEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Create Dealer\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function DealerEditorComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.saveDealer();\n        });\n        i0.ɵɵelementStart(3, \"div\")(4, \"label\", 1);\n        i0.ɵɵtext(5, \"Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 2);\n        i0.ɵɵtemplate(7, DealerEditorComponent_div_7_Template, 2, 0, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"agm-map\", 5);\n        i0.ɵɵlistener(\"mapClick\", function DealerEditorComponent_Template_agm_map_mapClick_9_listener($event) {\n          return ctx.onMapClick($event);\n        });\n        i0.ɵɵelement(10, \"agm-marker\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"button\", 7);\n        i0.ɵɵtext(12, \"Save\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.dealerForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.dealerForm.get(\"name\").invalid && ctx.dealerForm.get(\"name\").touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"latitude\", ctx.selectedLocation.latitude)(\"longitude\", ctx.selectedLocation.longitude);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"latitude\", ctx.selectedLocation.latitude)(\"longitude\", ctx.selectedLocation.longitude);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.dealerForm.valid);\n      }\n    },\n    dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.AgmMap, i4.AgmMarker],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n  return DealerEditorComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","DealerLocation","i0","DealerEditorComponent","constructor","formBuilder","http","ngOnInit","dealerForm","group","name","required","onMapClick","event","selectedLocation","latitude","coords","lat","longitude","lng","reverseGeocode","apiUrl","get","subscribe","response","results","length","addressComponents","address_components","city","extractAddressComponent","country","components","type","component","types","includes","long_name","saveDealer","valid","dealerData","value","location","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/balosumihai/Master II/RentACar/RentACar-FrontEnd/src/app/car-dealer/dealer-editor/dealer-editor.component.ts","/Users/balosumihai/Master II/RentACar/RentACar-FrontEnd/src/app/car-dealer/dealer-editor/dealer-editor.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { DealerLocation } from 'src/app/model/DealerLocation';\nimport { CarDealer } from 'src/app/model/CarDealer';\n\n@Component({\n  selector: 'app-dealer-editor',\n  templateUrl: './dealer-editor.component.html',\n  styleUrls: ['./dealer-editor.component.css'],\n})\nexport class DealerEditorComponent implements OnInit {\n  dealerForm!: FormGroup;\n  selectedLocation: DealerLocation = new DealerLocation();\n\n  constructor(private formBuilder: FormBuilder, private http: HttpClient) {}\n\n  ngOnInit() {\n    this.dealerForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      // Add other dealer form fields here\n    });\n  }\n\n  onMapClick(event: any) {\n    this.selectedLocation.latitude = event.coords.lat;\n    this.selectedLocation.longitude = event.coords.lng;\n    this.reverseGeocode(event.coords.lat, event.coords.lng);\n  }\n\n  reverseGeocode(latitude: number, longitude: number) {\n    const apiUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=AIzaSyCn3dK4iamN8xCBVJzVIvMwEbyRUdylRA4`;\n    \n    this.http.get<any>(apiUrl).subscribe((response) => {\n      if (response.results.length > 0) {\n        const addressComponents = response.results[0].address_components;\n        const city = this.extractAddressComponent(addressComponents, 'locality');\n        const country = this.extractAddressComponent(addressComponents, 'country');\n\n        this.selectedLocation.city = city;\n        this.selectedLocation.country = country;\n      }\n    });\n  }\n\n  extractAddressComponent(components: any[], type: string): string {\n    for (const component of components) {\n      if (component.types.includes(type)) {\n        return component.long_name;\n      }\n    }\n    return '';\n  }\n\n  saveDealer() {\n    if (this.dealerForm.valid) {\n      const dealerData: CarDealer = {\n        ...this.dealerForm.value,\n        location: this.selectedLocation,\n      };\n      // Perform API call or any other saving logic with dealerData\n    }\n  }\n}\n","<h2>Create Dealer</h2>\n\n<form [formGroup]=\"dealerForm\" (ngSubmit)=\"saveDealer()\">\n\n  <div>\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" formControlName=\"name\" />\n    <div *ngIf=\"dealerForm.get('name').invalid && dealerForm.get('name').touched\">\n      Name is required.\n    </div>\n  </div>\n\n  <!-- Add other dealer form fields here -->\n\n  <div style=\"height: 400px; width: 100%;\">\n    <agm-map [latitude]=\"selectedLocation.latitude\" [longitude]=\"selectedLocation.longitude\" (mapClick)=\"onMapClick($event)\">\n      <agm-marker [latitude]=\"selectedLocation.latitude\" [longitude]=\"selectedLocation.longitude\"></agm-marker>\n    </agm-map>\n  </div>\n\n  <button type=\"submit\" [disabled]=\"!dealerForm.valid\">Save</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}