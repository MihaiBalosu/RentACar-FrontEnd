{"ast":null,"code":"import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 12);\n    i0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\nfunction MatSelect_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 15, 16);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_10_Template_div_animation_transformPanel_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_10_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: /*#__PURE__*/trigger('transformPanelWrap', [/*#__PURE__*/transition('* => void', /*#__PURE__*/query('@transformPanel', [/*#__PURE__*/animateChild()], {\n    optional: true\n  }))]),\n  /** This animation transforms the select's overlay panel on and off the page. */\n  transformPanel: /*#__PURE__*/trigger('transformPanel', [/*#__PURE__*/state('void', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  })), /*#__PURE__*/transition('void => showing', /*#__PURE__*/animate('120ms cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  }))), /*#__PURE__*/transition('* => void', /*#__PURE__*/animate('100ms linear', /*#__PURE__*/style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = /*#__PURE__*/new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = /*#__PURE__*/new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n  constructor( /** Reference to the select that emitted the change event. */\n  source, /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinTabIndex( /*#__PURE__*/mixinDisabled( /*#__PURE__*/mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /**\n   * Form control bound to the component.\n   * Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    this.stateChanges = new Subject();\n  }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nlet _MatSelectBase = /*#__PURE__*/(() => {\n  class _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n      return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n      return this._placeholder;\n    }\n    set placeholder(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n      return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n      return this._multiple;\n    }\n    set multiple(value) {\n      if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectDynamicMultipleError();\n      }\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n      return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n      return this._compareWith;\n    }\n    set compareWith(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonFunctionValueError();\n      }\n      this._compareWith = fn;\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /** Value of the select control. */\n    get value() {\n      return this._value;\n    }\n    set value(newValue) {\n      const hasAssigned = this._assignValue(newValue);\n      if (hasAssigned) {\n        this._onChange(newValue);\n      }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n      return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n      this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n      return this._id;\n    }\n    set id(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n      super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      this._viewportRuler = _viewportRuler;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._ngZone = _ngZone;\n      this._dir = _dir;\n      this._parentFormField = _parentFormField;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._defaultOptions = _defaultOptions;\n      /** Whether or not the overlay panel is open. */\n      this._panelOpen = false;\n      /** Comparison function to specify which option is displayed. Defaults to object equality. */\n      this._compareWith = (o1, o2) => o1 === o2;\n      /** Unique id for this input. */\n      this._uid = `mat-select-${nextUniqueId++}`;\n      /** Current `aria-labelledby` value for the select trigger. */\n      this._triggerAriaLabelledBy = null;\n      /** Emits whenever the component is destroyed. */\n      this._destroy = new Subject();\n      /** `View -> model callback called when value changes` */\n      this._onChange = () => {};\n      /** `View -> model callback called when select has been touched` */\n      this._onTouched = () => {};\n      /** ID for the DOM node containing the select's value. */\n      this._valueId = `mat-select-value-${nextUniqueId++}`;\n      /** Emits when the panel element is finished transforming in. */\n      this._panelDoneAnimatingStream = new Subject();\n      this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n      this._focused = false;\n      /** A name for this control that can be used by `mat-form-field`. */\n      this.controlType = 'mat-select';\n      this._multiple = false;\n      this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n      /** Aria label of the select. */\n      this.ariaLabel = '';\n      /** Combined stream of all of the child options' change events. */\n      this.optionSelectionChanges = defer(() => {\n        const options = this.options;\n        if (options) {\n          return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n      });\n      /** Event emitted when the select panel has been toggled. */\n      this.openedChange = new EventEmitter();\n      /** Event emitted when the select has been opened. */\n      this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n      /** Event emitted when the select has been closed. */\n      this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n      /** Event emitted when the selected value has been changed by the user. */\n      this.selectionChange = new EventEmitter();\n      /**\n       * Event that emits whenever the raw value of the select changes. This is here primarily\n       * to facilitate the two-way binding for the `value` input.\n       * @docs-private\n       */\n      this.valueChange = new EventEmitter();\n      if (this.ngControl) {\n        // Note: we provide the value accessor through here, instead of\n        // the `providers` to avoid running into a circular import.\n        this.ngControl.valueAccessor = this;\n      }\n      // Note that we only want to set this when the defaults pass it in, otherwise it should\n      // stay as `undefined` so that it falls back to the default in the key manager.\n      if (_defaultOptions?.typeaheadDebounceInterval != null) {\n        this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n      }\n      this._scrollStrategyFactory = scrollStrategyFactory;\n      this._scrollStrategy = this._scrollStrategyFactory();\n      this.tabIndex = parseInt(tabIndex) || 0;\n      // Force setter to be called in case id was not specified.\n      this.id = this.id;\n    }\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next();\n      // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n      this._initKeyManager();\n      this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n        event.added.forEach(option => option.select());\n        event.removed.forEach(option => option.deselect());\n      });\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n        this._resetOptions();\n        this._initializeSelection();\n      });\n    }\n    ngDoCheck() {\n      const newAriaLabelledby = this._getTriggerAriaLabelledby();\n      const ngControl = this.ngControl;\n      // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n      // is computed as a result of a content query which can cause this binding to trigger a\n      // \"changed after checked\" error.\n      if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n        const element = this._elementRef.nativeElement;\n        this._triggerAriaLabelledBy = newAriaLabelledby;\n        if (newAriaLabelledby) {\n          element.setAttribute('aria-labelledby', newAriaLabelledby);\n        } else {\n          element.removeAttribute('aria-labelledby');\n        }\n      }\n      if (ngControl) {\n        // The disabled state might go out of sync if the form group is swapped out. See #17860.\n        if (this._previousControl !== ngControl.control) {\n          if (this._previousControl !== undefined && ngControl.disabled !== null && ngControl.disabled !== this.disabled) {\n            this.disabled = ngControl.disabled;\n          }\n          this._previousControl = ngControl.control;\n        }\n        this.updateErrorState();\n      }\n    }\n    ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes['disabled'] || changes['userAriaDescribedBy']) {\n        this.stateChanges.next();\n      }\n      if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n        this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n      }\n    }\n    ngOnDestroy() {\n      this._keyManager?.destroy();\n      this._destroy.next();\n      this._destroy.complete();\n      this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n      if (this._canOpen()) {\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n        this._changeDetectorRef.markForCheck();\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n      this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n      return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n      return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n      if (this.empty) {\n        return '';\n      }\n      if (this._multiple) {\n        const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        }\n        // TODO(crisbeto): delimiter should be configurable for proper localization.\n        return selectedOptions.join(', ');\n      }\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      const manager = this._keyManager;\n      // Open the select on ALT + arrow key to match the native <select>\n      if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (!this.multiple) {\n        const previouslySelectedOption = this.selected;\n        manager.onKeydown(event);\n        const selectedOption = this.selected;\n        // Since the value has changed, we need to announce it ourselves.\n        if (selectedOption && previouslySelectedOption !== selectedOption) {\n          // We set a duration on the live announcement, because we want the live element to be\n          // cleared after a while so that users can't navigate to it using the arrow keys.\n          this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n        }\n      }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n      const manager = this._keyManager;\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const isTyping = manager.isTyping();\n      if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close();\n        // Don't do anything in this case if the user is typing,\n        // because the typing sequence can include the space key.\n      } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n        event.preventDefault();\n        manager.activeItem._selectViaInteraction();\n      } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n        this.options.forEach(option => {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        const previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n    _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n      this._focused = false;\n      this._keyManager?.cancelTypeahead();\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n      this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n        this._changeDetectorRef.detectChanges();\n        this._positioningSettled();\n      });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n      return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        if (this.ngControl) {\n          this._value = this.ngControl.value;\n        }\n        this._setSelectionByValue(this._value);\n        this.stateChanges.next();\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n      this.options.forEach(option => option.setInactiveStyles());\n      this._selectionModel.clear();\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonArrayValueError();\n        }\n        value.forEach(currentValue => this._selectOptionByValue(currentValue));\n        this._sortValues();\n      } else {\n        const correspondingOption = this._selectOptionByValue(value);\n        // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n        if (correspondingOption) {\n          this._keyManager.updateActiveItem(correspondingOption);\n        } else if (!this.panelOpen) {\n          // Otherwise reset the highlighted option. Note that we only want to do this while\n          // closed, because doing it while open can shift the user's focus unnecessarily.\n          this._keyManager.updateActiveItem(-1);\n        }\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (this._selectionModel.isSelected(option)) {\n          return false;\n        }\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && this._compareWith(option.value, value);\n        } catch (error) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n          return false;\n        }\n      });\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n      return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n      // Always re-assign an array, because it might have been mutated.\n      if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n        if (this.options) {\n          this._setSelectionByValue(newValue);\n        }\n        this._value = newValue;\n        return true;\n      }\n      return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withPageUpDown().withAllowedModifierKeys(['shiftKey']);\n      this._keyManager.tabOut.subscribe(() => {\n        if (this.panelOpen) {\n          // Select the active item when tabbing away. This is consistent with how the native\n          // select behaves. Note that we only want to do this in single selection mode.\n          if (!this.multiple && this._keyManager.activeItem) {\n            this._keyManager.activeItem._selectViaInteraction();\n          }\n          // Restore focus to the trigger before closing. Ensures that the focus\n          // position won't be lost if the user got focus into the overlay.\n          this.focus();\n          this.close();\n        }\n      });\n      this._keyManager.change.subscribe(() => {\n        if (this._panelOpen && this.panel) {\n          this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n        } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n      const changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n        this._onSelect(event.source, event.isUserInput);\n        if (event.isUserInput && !this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n      // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n      merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n        // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n        // be the result of an expression changing. We have to use `detectChanges` in order\n        // to avoid \"changed after checked\" errors (see #14793).\n        this._changeDetectorRef.detectChanges();\n        this.stateChanges.next();\n      });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n      const wasSelected = this._selectionModel.isSelected(option);\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n        this._selectionModel.clear();\n        if (this.value != null) {\n          this._propagateChanges(option.value);\n        }\n      } else {\n        if (wasSelected !== option.selected) {\n          option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n        }\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n        if (this.multiple) {\n          this._sortValues();\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n      this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n      if (this.multiple) {\n        const options = this.options.toArray();\n        this._selectionModel.sort((a, b) => {\n          return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n      let valueToEmit = null;\n      if (this.multiple) {\n        valueToEmit = this.selected.map(option => option.value);\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n      this._onChange(valueToEmit);\n      this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          this._keyManager.setFirstItemActive();\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n      return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n      const labelId = this._parentFormField?.getLabelId();\n      const labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n      return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n      const labelId = this._parentFormField?.getLabelId();\n      let value = (labelId ? labelId + ' ' : '') + this._valueId;\n      if (this.ariaLabelledby) {\n        value += ' ' + this.ariaLabelledby;\n      }\n      return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n      this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n      if (ids.length) {\n        this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        this._elementRef.nativeElement.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n      return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n    }\n  }\n  _MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n    return new (t || _MatSelectBase)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NgForm, 8), i0.ɵɵdirectiveInject(i4.FormGroupDirective, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), i0.ɵɵdirectiveInject(i4.NgControl, 10), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.LiveAnnouncer), i0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n  };\n  _MatSelectBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatSelectBase,\n    viewQuery: function _MatSelectBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n      }\n    },\n    inputs: {\n      userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n      panelClass: \"panelClass\",\n      placeholder: \"placeholder\",\n      required: \"required\",\n      multiple: \"multiple\",\n      disableOptionCentering: \"disableOptionCentering\",\n      compareWith: \"compareWith\",\n      value: \"value\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      errorStateMatcher: \"errorStateMatcher\",\n      typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n      sortComparator: \"sortComparator\",\n      id: \"id\"\n    },\n    outputs: {\n      openedChange: \"openedChange\",\n      _openedStream: \"opened\",\n      _closedStream: \"closed\",\n      selectionChange: \"selectionChange\",\n      valueChange: \"valueChange\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n  return _MatSelectBase;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nlet MatSelectTrigger = /*#__PURE__*/(() => {\n  class MatSelectTrigger {}\n  MatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n    return new (t || MatSelectTrigger)();\n  };\n  MatSelectTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatSelectTrigger,\n    selectors: [[\"mat-select-trigger\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_SELECT_TRIGGER,\n      useExisting: MatSelectTrigger\n    }])]\n  });\n  return MatSelectTrigger;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSelect = /*#__PURE__*/(() => {\n  class MatSelect extends _MatSelectBase {\n    constructor() {\n      super(...arguments);\n      this._positions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass: 'mat-mdc-select-panel-above'\n      }];\n      this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    }\n    get shouldLabelFloat() {\n      // Since the panel doesn't overlap the trigger, we\n      // want the label to only float when there's a value.\n      return this.panelOpen || !this.empty || this.focused && !!this.placeholder;\n    }\n    ngOnInit() {\n      super.ngOnInit();\n      this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n        if (this.panelOpen) {\n          this._overlayWidth = this._getOverlayWidth();\n          this._changeDetectorRef.detectChanges();\n        }\n      });\n    }\n    ngAfterViewInit() {\n      // Note that it's important that we read this in `ngAfterViewInit`, because\n      // reading it earlier will cause the form field to return a different element.\n      if (this._parentFormField) {\n        this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n      }\n    }\n    open() {\n      this._overlayWidth = this._getOverlayWidth();\n      super.open();\n      // Required for the MDC form field to pick up when the overlay has been opened.\n      this.stateChanges.next();\n    }\n    close() {\n      super.close();\n      // Required for the MDC form field to pick up when the overlay has been closed.\n      this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n      const option = this.options.toArray()[index];\n      if (option) {\n        const panel = this.panel.nativeElement;\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const element = option._getHostElement();\n        if (index === 0 && labelCount === 1) {\n          // If we've got one group label before the option and we're at the top option,\n          // scroll the list to the top. This is better UX than scrolling the list to the\n          // top of the option, because it allows the user to read the top group's label.\n          panel.scrollTop = 0;\n        } else {\n          panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n        }\n      }\n    }\n    _positioningSettled() {\n      this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n      return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth() {\n      const refToMeasure = this._preferredOverlayOrigin instanceof CdkOverlayOrigin ? this._preferredOverlayOrigin.elementRef : this._preferredOverlayOrigin || this._elementRef;\n      return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n      return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n      this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n      this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n      if (this.options) {\n        for (const option of this.options) {\n          option._changeDetectorRef.markForCheck();\n        }\n      }\n    }\n  }\n  MatSelect.ɵfac = /* @__PURE__ */function () {\n    let ɵMatSelect_BaseFactory;\n    return function MatSelect_Factory(t) {\n      return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n    };\n  }();\n  MatSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSelect,\n    selectors: [[\"mat-select\"]],\n    contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"listbox\", 1, \"mat-mdc-select\"],\n    hostVars: 19,\n    hostBindings: function MatSelect_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        i0.ɵɵclassProp(\"mat-mdc-select-disabled\", ctx.disabled)(\"mat-mdc-select-invalid\", ctx.errorState)(\"mat-mdc-select-required\", ctx.required)(\"mat-mdc-select-empty\", ctx.empty)(\"mat-mdc-select-multiple\", ctx.multiple);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\",\n      hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\"\n    },\n    exportAs: [\"matSelect\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatSelect\n    }, {\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatSelect\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c3,\n    decls: 11,\n    vars: 11,\n    consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-mdc-select-trigger\", 3, \"click\"], [\"fallbackOverlayOrigin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-mdc-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-placeholder mat-mdc-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-mdc-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-mdc-select-arrow-wrapper\"], [1, \"mat-mdc-select-arrow\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"focusable\", \"false\"], [\"d\", \"M7 10l5 5 5-5z\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayWidth\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-mdc-select-placeholder\", \"mat-mdc-select-min-line\"], [1, \"mat-mdc-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-mdc-select-min-line\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n    template: function MatSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c2);\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n          return ctx.toggle();\n        });\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        i0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(8, \"svg\", 7);\n        i0.ɵɵelement(9, \"path\", 8);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵtemplate(10, MatSelect_ng_template_10_Template, 3, 9, \"ng-template\", 9);\n        i0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_10_listener() {\n          return ctx.close();\n        })(\"attach\", function MatSelect_Template_ng_template_attach_10_listener() {\n          return ctx._onAttached();\n        })(\"detach\", function MatSelect_Template_ng_template_detach_10_listener() {\n          return ctx.close();\n        });\n      }\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n        i0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        i0.ɵɵattribute(\"id\", ctx._valueId);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngSwitchCase\", false);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", ctx._preferredOverlayOrigin || _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayWidth\", ctx._overlayWidth);\n      }\n    },\n    dependencies: [i7.NgClass, i7.NgSwitch, i7.NgSwitchCase, i7.NgSwitchDefault, i8.CdkConnectedOverlay, i8.CdkOverlayOrigin],\n    styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSelectAnimations.transformPanel]\n    },\n    changeDetection: 0\n  });\n  return MatSelect;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSelectModule = /*#__PURE__*/(() => {\n  class MatSelectModule {}\n  MatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n    return new (t || MatSelectModule)();\n  };\n  MatSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatSelectModule\n  });\n  MatSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n  });\n  return MatSelectModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["i8","Overlay","CdkConnectedOverlay","CdkOverlayOrigin","OverlayModule","i7","CommonModule","i0","InjectionToken","EventEmitter","Directive","Optional","Inject","Self","Attribute","Input","ViewChild","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","i2","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","i1","CdkScrollableModule","i5","ActiveDescendantKeyManager","i3","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","matSelectAnimations","transformPanelWrap","optional","transformPanel","opacity","transform","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","_MatSelectBase","focused","_focused","_panelOpen","placeholder","_placeholder","next","required","_required","control","hasValidator","multiple","_multiple","_selectionModel","ngDevMode","disableOptionCentering","_disableOptionCentering","compareWith","_compareWith","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","id","_id","_uid","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","controlType","ariaLabel","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","destroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","NgControl","LiveAnnouncer","ɵdir","MatSelectTrigger","useExisting","MatSelect","arguments","_positions","originX","originY","overlayX","overlayY","panelClass","_hideSingleSelectionIndicator","hideSingleSelectionIndicator","_overlayWidth","_getOverlayWidth","ngAfterViewInit","_preferredOverlayOrigin","getConnectedOverlayOrigin","index","labelCount","optionGroups","_getHostElement","scrollTop","offsetTop","offsetHeight","refToMeasure","getBoundingClientRect","width","_syncParentProperties","ɵcmp","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","MatSelectModule","ɵmod","ɵinj"],"sources":["/Users/balosumihai/Master II/RentACar/RentACar-FrontEnd/node_modules/@angular/material/fesm2020/select.mjs"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth();\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterViewInit() {\n        // Note that it's important that we read this in `ngAfterViewInit`, because\n        // reading it earlier will cause the form field to return a different element.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n    }\n    open() {\n        this._overlayWidth = this._getOverlayWidth();\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth() {\n        const refToMeasure = this._preferredOverlayOrigin instanceof CdkOverlayOrigin\n            ? this._preferredOverlayOrigin.elementRef\n            : this._preferredOverlayOrigin || this._elementRef;\n        return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mdc-menu-surface{display:none;position:absolute;box-sizing:border-box;max-width:calc(100vw - 32px);max-width:var(--mdc-menu-max-width, calc(100vw - 32px));max-height:calc(100vh - 32px);max-height:var(--mdc-menu-max-height, calc(100vh - 32px));margin:0;padding:0;transform:scale(1);transform-origin:top left;opacity:0;overflow:auto;will-change:transform,opacity;z-index:8;border-radius:4px;border-radius:var(--mdc-shape-medium, 4px);transform-origin-left:top left;transform-origin-right:top right}.mdc-menu-surface:focus{outline:none}.mdc-menu-surface--animating-open{display:inline-block;transform:scale(0.8);opacity:0}.mdc-menu-surface--open{display:inline-block;transform:scale(1);opacity:1}.mdc-menu-surface--animating-closed{display:inline-block;opacity:0}[dir=rtl] .mdc-menu-surface,.mdc-menu-surface[dir=rtl]{transform-origin-left:top right;transform-origin-right:top left}.mdc-menu-surface--anchor{position:relative;overflow:visible}.mdc-menu-surface--fixed{position:fixed}.mdc-menu-surface--fullwidth{width:100%}.mat-mdc-select{display:inline-block;width:100%;outline:none}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}.mdc-menu-surface.mat-mdc-select-panel{width:100%;max-height:275px;position:static;outline:0;margin:0;padding:8px 0;list-style-type:none}.mdc-menu-surface.mat-mdc-select-panel:focus{outline:none}.cdk-high-contrast-active .mdc-menu-surface.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) .mdc-menu-surface.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above .mdc-menu-surface.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,sBAAsB;AAC1C,SAASC,OAAO,EAAEC,mBAAmB,EAAEC,gBAAgB,EAAEC,aAAa,QAAQ,sBAAsB;AACpG,OAAO,KAAKC,EAAE,MAAM,iBAAiB;AACrC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,cAAc,EAAEC,YAAY,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,KAAK,EAAEC,SAAS,EAAEC,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,eAAe,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,eAAe;AACpO,OAAO,KAAKC,EAAE,MAAM,wBAAwB;AAC5C,SAASC,kBAAkB,EAAEC,aAAa,EAAEC,aAAa,EAAEC,eAAe,EAAEC,6BAA6B,EAAEC,wBAAwB,EAAEC,2BAA2B,EAAEC,SAAS,EAAEC,YAAY,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AAC3P,OAAO,KAAKC,EAAE,MAAM,8BAA8B;AAClD,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,kBAAkB,QAAQ,8BAA8B;AACtG,OAAO,KAAKC,EAAE,MAAM,wBAAwB;AAC5C,SAASC,mBAAmB,QAAQ,wBAAwB;AAC5D,OAAO,KAAKC,EAAE,MAAM,mBAAmB;AACvC,SAASC,0BAA0B,QAAQ,mBAAmB;AAC9D,OAAO,KAAKC,EAAE,MAAM,mBAAmB;AACvC,SAASC,qBAAqB,EAAEC,oBAAoB,QAAQ,uBAAuB;AACnF,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,UAAU,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,EAAEC,KAAK,EAAEC,KAAK,EAAEC,cAAc,EAAEC,CAAC,QAAQ,uBAAuB;AACtH,OAAO,KAAKC,EAAE,MAAM,gBAAgB;AACpC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,MAAM;AAC5C,SAASC,SAAS,EAAEC,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAEC,oBAAoB,EAAEC,SAAS,QAAQ,gBAAgB;AACzG,SAASC,OAAO,EAAEC,UAAU,EAAEC,KAAK,EAAEC,YAAY,EAAEC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,qBAAqB;;AAErG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;EAAA;IAwzBsGnE,EAAE,8BA4MysC;IA5M3sCA,EAAE,UA4MwtC;IA5M1tCA,EAAE,eA4M+tC;EAAA;EAAA;IAAA,eA5MjuCA,EAAE;IAAFA,EAAE,aA4MwtC;IA5M1tCA,EAAE,sCA4MwtC;EAAA;AAAA;AAAA;EAAA;IA5M1tCA,EAAE,8BA4Mu4C;IA5Mz4CA,EAAE,UA4Mu5C;IA5Mz5CA,EAAE,eA4M85C;EAAA;EAAA;IAAA,eA5Mh6CA,EAAE;IAAFA,EAAE,aA4Mu5C;IA5Mz5CA,EAAE,uCA4Mu5C;EAAA;AAAA;AAAA;EAAA;IA5Mz5CA,EAAE,8CA4Mo/C;EAAA;AAAA;AAAA;EAAA;IA5Mt/CA,EAAE,8BA4Ms0C;IA5Mx0CA,EAAE,kEA4M85C;IA5Mh6CA,EAAE,8EA4Mo/C;IA5Mt/CA,EAAE,eA4MigD;EAAA;EAAA;IAAA,eA5MngDA,EAAE;IAAFA,EAAE,+CA4Mq0C;IA5Mv0CA,EAAE,aA4Mo+C;IA5Mt+CA,EAAE,iCA4Mo+C;EAAA;AAAA;AAAA;EAAA;IAAA,YA5Mt+CA,EAAE;IAAFA,EAAE;IAAFA,EAAE,kBA4M4+F;IA5M9+FA,EAAE,iCA4M4+F;IA5M9+FA,EAAE;MAAFA,EAAE;MAAA,eAAFA,EAAE;MAAA,OAAFA,EAAE,aA4Mi5F,qDAA8C;IAAA,EAAE;MA5Mn8FA,EAAE;MAAA,gBAAFA,EAAE;MAAA,OAAFA,EAAE,aA4Mm9F,8BAAsB;IAAA,EAAxC;IA5Mn8FA,EAAE,mBA4M2gG;IA5M7gGA,EAAE,eA4MqhG;EAAA;EAAA;IAAA,eA5MvhGA,EAAE;IAAFA,EAAE,qHA4MynF;IA5M3nFA,EAAE,yCA4M60F;IA5M/0FA,EAAE,wCA4M0pF;EAAA;AAAA;AAAA;AAAA;AA7/BlwF,MAAMoE,mBAAmB,GAAG;EACxB;AACJ;AACA;AACA;AACA;EACIC,kBAAkB,eAAER,OAAO,CAAC,oBAAoB,EAAE,cAC9CC,UAAU,CAAC,WAAW,eAAEC,KAAK,CAAC,iBAAiB,EAAE,cAACC,YAAY,EAAE,CAAC,EAAE;IAAEM,QAAQ,EAAE;EAAK,CAAC,CAAC,CAAC,CAC1F,CAAC;EACF;EACAC,cAAc,eAAEV,OAAO,CAAC,gBAAgB,EAAE,cACtCI,KAAK,CAAC,MAAM,eAAEC,KAAK,CAAC;IAChBM,OAAO,EAAE,CAAC;IACVC,SAAS,EAAE;EACf,CAAC,CAAC,CAAC,eACHX,UAAU,CAAC,iBAAiB,eAAEK,OAAO,CAAC,kCAAkC,eAAED,KAAK,CAAC;IAC5EM,OAAO,EAAE,CAAC;IACVC,SAAS,EAAE;EACf,CAAC,CAAC,CAAC,CAAC,eACJX,UAAU,CAAC,WAAW,eAAEK,OAAO,CAAC,cAAc,eAAED,KAAK,CAAC;IAAEM,OAAO,EAAE;EAAE,CAAC,CAAC,CAAC,CAAC,CAC1E;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gCAAgC,GAAG;EACxC,OAAOC,KAAK,CAAC,+DAA+D,CAAC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,8BAA8B,GAAG;EACtC,OAAOD,KAAK,CAAC,oDAAoD,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iCAAiC,GAAG;EACzC,OAAOF,KAAK,CAAC,mCAAmC,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,YAAY,GAAG,CAAC;AACpB;AACA,MAAMC,0BAA0B,gBAAG,IAAI9E,cAAc,CAAC,4BAA4B,CAAC;AACnF;AACA,SAAS+E,2CAA2C,CAACC,OAAO,EAAE;EAC1D,OAAO,MAAMA,OAAO,CAACC,gBAAgB,CAACC,UAAU,EAAE;AACtD;AACA;AACA,MAAMC,iBAAiB,gBAAG,IAAInF,cAAc,CAAC,mBAAmB,CAAC;AACjE;AACA,MAAMoF,mCAAmC,GAAG;EACxCC,OAAO,EAAEP,0BAA0B;EACnCQ,IAAI,EAAE,CAAC7F,OAAO,CAAC;EACf8F,UAAU,EAAER;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMS,kBAAkB,gBAAG,IAAIxF,cAAc,CAAC,kBAAkB,CAAC;AACjE;AACA,MAAMyF,eAAe,CAAC;EAClBC,WAAW,EACX;EACAC,MAAM,EACN;EACAC,KAAK,EAAE;IACH,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA;AACA;AACA,MAAMC,mBAAmB,gBAAG5E,kBAAkB,eAACC,aAAa,eAACC,aAAa,eAACC,eAAe,CAAC,MAAM;EAC7FsE,WAAW,CAACI,WAAW,EAAEC,yBAAyB,EAAEC,WAAW,EAAEC,gBAAgB;EACjF;AACJ;AACA;AACA;AACA;EACIC,SAAS,EAAE;IACP,IAAI,CAACJ,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,yBAAyB,GAAGA,yBAAyB;IAC1D,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,IAAIjD,OAAO,EAAE;EACrC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC;AACL;AAAA,IACMkD,cAAc;EAApB,MAAMA,cAAc,SAASP,mBAAmB,CAAC;IAC7C;IACA,IAAIQ,OAAO,GAAG;MACV,OAAO,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,UAAU;IAC3C;IACA;IACA,IAAIC,WAAW,GAAG;MACd,OAAO,IAAI,CAACC,YAAY;IAC5B;IACA,IAAID,WAAW,CAACZ,KAAK,EAAE;MACnB,IAAI,CAACa,YAAY,GAAGb,KAAK;MACzB,IAAI,CAACO,YAAY,CAACO,IAAI,EAAE;IAC5B;IACA;IACA,IAAIC,QAAQ,GAAG;MACX,OAAO,IAAI,CAACC,SAAS,IAAI,IAAI,CAACV,SAAS,EAAEW,OAAO,EAAEC,YAAY,CAAC7D,UAAU,CAAC0D,QAAQ,CAAC,IAAI,KAAK;IAChG;IACA,IAAIA,QAAQ,CAACf,KAAK,EAAE;MAChB,IAAI,CAACgB,SAAS,GAAGvE,qBAAqB,CAACuD,KAAK,CAAC;MAC7C,IAAI,CAACO,YAAY,CAACO,IAAI,EAAE;IAC5B;IACA;IACA,IAAIK,QAAQ,GAAG;MACX,OAAO,IAAI,CAACC,SAAS;IACzB;IACA,IAAID,QAAQ,CAACnB,KAAK,EAAE;MAChB,IAAI,IAAI,CAACqB,eAAe,KAAK,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QACzE,MAAMzC,gCAAgC,EAAE;MAC5C;MACA,IAAI,CAACuC,SAAS,GAAG3E,qBAAqB,CAACuD,KAAK,CAAC;IACjD;IACA;IACA,IAAIuB,sBAAsB,GAAG;MACzB,OAAO,IAAI,CAACC,uBAAuB;IACvC;IACA,IAAID,sBAAsB,CAACvB,KAAK,EAAE;MAC9B,IAAI,CAACwB,uBAAuB,GAAG/E,qBAAqB,CAACuD,KAAK,CAAC;IAC/D;IACA;AACJ;AACA;AACA;AACA;IACI,IAAIyB,WAAW,GAAG;MACd,OAAO,IAAI,CAACC,YAAY;IAC5B;IACA,IAAID,WAAW,CAACE,EAAE,EAAE;MAChB,IAAI,OAAOA,EAAE,KAAK,UAAU,KAAK,OAAOL,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QAC7E,MAAMtC,iCAAiC,EAAE;MAC7C;MACA,IAAI,CAAC0C,YAAY,GAAGC,EAAE;MACtB,IAAI,IAAI,CAACN,eAAe,EAAE;QACtB;QACA,IAAI,CAACO,oBAAoB,EAAE;MAC/B;IACJ;IACA;IACA,IAAI5B,KAAK,GAAG;MACR,OAAO,IAAI,CAAC6B,MAAM;IACtB;IACA,IAAI7B,KAAK,CAAC8B,QAAQ,EAAE;MAChB,MAAMC,WAAW,GAAG,IAAI,CAACC,YAAY,CAACF,QAAQ,CAAC;MAC/C,IAAIC,WAAW,EAAE;QACb,IAAI,CAACE,SAAS,CAACH,QAAQ,CAAC;MAC5B;IACJ;IACA;IACA,IAAII,yBAAyB,GAAG;MAC5B,OAAO,IAAI,CAACC,0BAA0B;IAC1C;IACA,IAAID,yBAAyB,CAAClC,KAAK,EAAE;MACjC,IAAI,CAACmC,0BAA0B,GAAGzF,oBAAoB,CAACsD,KAAK,CAAC;IACjE;IACA;IACA,IAAIoC,EAAE,GAAG;MACL,OAAO,IAAI,CAACC,GAAG;IACnB;IACA,IAAID,EAAE,CAACpC,KAAK,EAAE;MACV,IAAI,CAACqC,GAAG,GAAGrC,KAAK,IAAI,IAAI,CAACsC,IAAI;MAC7B,IAAI,CAAC/B,YAAY,CAACO,IAAI,EAAE;IAC5B;IACAhB,WAAW,CAACyC,cAAc,EAAEC,kBAAkB,EAAEC,OAAO,EAAEtC,yBAAyB,EAAEuC,UAAU,EAAEC,IAAI,EAAEvC,WAAW,EAAEC,gBAAgB,EAAEuC,gBAAgB,EAAEtC,SAAS,EAAEuC,QAAQ,EAAEC,qBAAqB,EAAEC,cAAc,EAAEC,eAAe,EAAE;MAChO,KAAK,CAACN,UAAU,EAAEvC,yBAAyB,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,SAAS,CAAC;MACtF,IAAI,CAACiC,cAAc,GAAGA,cAAc;MACpC,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;MAC5C,IAAI,CAACC,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACE,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;MACxC,IAAI,CAACG,cAAc,GAAGA,cAAc;MACpC,IAAI,CAACC,eAAe,GAAGA,eAAe;MACtC;MACA,IAAI,CAACrC,UAAU,GAAG,KAAK;MACvB;MACA,IAAI,CAACe,YAAY,GAAG,CAACuB,EAAE,EAAEC,EAAE,KAAKD,EAAE,KAAKC,EAAE;MACzC;MACA,IAAI,CAACZ,IAAI,GAAI,cAAarD,YAAY,EAAG,EAAC;MAC1C;MACA,IAAI,CAACkE,sBAAsB,GAAG,IAAI;MAClC;MACA,IAAI,CAACC,QAAQ,GAAG,IAAI9F,OAAO,EAAE;MAC7B;MACA,IAAI,CAAC2E,SAAS,GAAG,MAAM,CAAE,CAAC;MAC1B;MACA,IAAI,CAACoB,UAAU,GAAG,MAAM,CAAE,CAAC;MAC3B;MACA,IAAI,CAACC,QAAQ,GAAI,oBAAmBrE,YAAY,EAAG,EAAC;MACpD;MACA,IAAI,CAACsE,yBAAyB,GAAG,IAAIjG,OAAO,EAAE;MAC9C,IAAI,CAACkG,kBAAkB,GAAG,IAAI,CAACR,eAAe,EAAES,iBAAiB,IAAI,EAAE;MACvE,IAAI,CAAC/C,QAAQ,GAAG,KAAK;MACrB;MACA,IAAI,CAACgD,WAAW,GAAG,YAAY;MAC/B,IAAI,CAACtC,SAAS,GAAG,KAAK;MACtB,IAAI,CAACI,uBAAuB,GAAG,IAAI,CAACwB,eAAe,EAAEzB,sBAAsB,IAAI,KAAK;MACpF;MACA,IAAI,CAACoC,SAAS,GAAG,EAAE;MACnB;MACA,IAAI,CAACC,sBAAsB,GAAGrG,KAAK,CAAC,MAAM;QACtC,MAAMsG,OAAO,GAAG,IAAI,CAACA,OAAO;QAC5B,IAAIA,OAAO,EAAE;UACT,OAAOA,OAAO,CAACC,OAAO,CAACC,IAAI,CAACtG,SAAS,CAACoG,OAAO,CAAC,EAAEnG,SAAS,CAAC,MAAMF,KAAK,CAAC,GAAGqG,OAAO,CAAChG,GAAG,CAACmG,MAAM,IAAIA,MAAM,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC/H;QACA,OAAO,IAAI,CAACxB,OAAO,CAACyB,QAAQ,CAACH,IAAI,CAACpG,IAAI,CAAC,CAAC,CAAC,EAAED,SAAS,CAAC,MAAM,IAAI,CAACkG,sBAAsB,CAAC,CAAC;MAC5F,CAAC,CAAC;MACF;MACA,IAAI,CAACO,YAAY,GAAG,IAAI9J,YAAY,EAAE;MACtC;MACA,IAAI,CAAC+J,aAAa,GAAG,IAAI,CAACD,YAAY,CAACJ,IAAI,CAACnG,MAAM,CAACyG,CAAC,IAAIA,CAAC,CAAC,EAAExG,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC;MAC3E;MACA,IAAI,CAACyG,aAAa,GAAG,IAAI,CAACH,YAAY,CAACJ,IAAI,CAACnG,MAAM,CAACyG,CAAC,IAAI,CAACA,CAAC,CAAC,EAAExG,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC;MAC5E;MACA,IAAI,CAAC0G,eAAe,GAAG,IAAIlK,YAAY,EAAE;MACzC;AACR;AACA;AACA;AACA;MACQ,IAAI,CAACmK,WAAW,GAAG,IAAInK,YAAY,EAAE;MACrC,IAAI,IAAI,CAACiG,SAAS,EAAE;QAChB;QACA;QACA,IAAI,CAACA,SAAS,CAACmE,aAAa,GAAG,IAAI;MACvC;MACA;MACA;MACA,IAAIzB,eAAe,EAAEd,yBAAyB,IAAI,IAAI,EAAE;QACpD,IAAI,CAACC,0BAA0B,GAAGa,eAAe,CAACd,yBAAyB;MAC/E;MACA,IAAI,CAACwC,sBAAsB,GAAG5B,qBAAqB;MACnD,IAAI,CAAC6B,eAAe,GAAG,IAAI,CAACD,sBAAsB,EAAE;MACpD,IAAI,CAAC7B,QAAQ,GAAG+B,QAAQ,CAAC/B,QAAQ,CAAC,IAAI,CAAC;MACvC;MACA,IAAI,CAACT,EAAE,GAAG,IAAI,CAACA,EAAE;IACrB;IACAyC,QAAQ,GAAG;MACP,IAAI,CAACxD,eAAe,GAAG,IAAI1E,cAAc,CAAC,IAAI,CAACwE,QAAQ,CAAC;MACxD,IAAI,CAACZ,YAAY,CAACO,IAAI,EAAE;MACxB;MACA;MACA;MACA,IAAI,CAACyC,yBAAyB,CACzBQ,IAAI,CAACjG,oBAAoB,EAAE,EAAEC,SAAS,CAAC,IAAI,CAACqF,QAAQ,CAAC,CAAC,CACtD0B,SAAS,CAAC,MAAM,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACC,SAAS,CAAC,CAAC;IAClE;IACAC,kBAAkB,GAAG;MACjB,IAAI,CAACC,eAAe,EAAE;MACtB,IAAI,CAAC7D,eAAe,CAAC8D,OAAO,CAACpB,IAAI,CAAChG,SAAS,CAAC,IAAI,CAACqF,QAAQ,CAAC,CAAC,CAAC0B,SAAS,CAACM,KAAK,IAAI;QAC3EA,KAAK,CAACC,KAAK,CAACC,OAAO,CAACtB,MAAM,IAAIA,MAAM,CAACuB,MAAM,EAAE,CAAC;QAC9CH,KAAK,CAACI,OAAO,CAACF,OAAO,CAACtB,MAAM,IAAIA,MAAM,CAACyB,QAAQ,EAAE,CAAC;MACtD,CAAC,CAAC;MACF,IAAI,CAAC5B,OAAO,CAACC,OAAO,CAACC,IAAI,CAACtG,SAAS,CAAC,IAAI,CAAC,EAAEM,SAAS,CAAC,IAAI,CAACqF,QAAQ,CAAC,CAAC,CAAC0B,SAAS,CAAC,MAAM;QACjF,IAAI,CAACY,aAAa,EAAE;QACpB,IAAI,CAAC9D,oBAAoB,EAAE;MAC/B,CAAC,CAAC;IACN;IACA+D,SAAS,GAAG;MACR,MAAMC,iBAAiB,GAAG,IAAI,CAACC,yBAAyB,EAAE;MAC1D,MAAMvF,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC;MACA;MACA;MACA,IAAIsF,iBAAiB,KAAK,IAAI,CAACzC,sBAAsB,EAAE;QACnD,MAAM2C,OAAO,GAAG,IAAI,CAAC5F,WAAW,CAAC6F,aAAa;QAC9C,IAAI,CAAC5C,sBAAsB,GAAGyC,iBAAiB;QAC/C,IAAIA,iBAAiB,EAAE;UACnBE,OAAO,CAACE,YAAY,CAAC,iBAAiB,EAAEJ,iBAAiB,CAAC;QAC9D,CAAC,MACI;UACDE,OAAO,CAACG,eAAe,CAAC,iBAAiB,CAAC;QAC9C;MACJ;MACA,IAAI3F,SAAS,EAAE;QACX;QACA,IAAI,IAAI,CAAC4F,gBAAgB,KAAK5F,SAAS,CAACW,OAAO,EAAE;UAC7C,IAAI,IAAI,CAACiF,gBAAgB,KAAKC,SAAS,IACnC7F,SAAS,CAAC8F,QAAQ,KAAK,IAAI,IAC3B9F,SAAS,CAAC8F,QAAQ,KAAK,IAAI,CAACA,QAAQ,EAAE;YACtC,IAAI,CAACA,QAAQ,GAAG9F,SAAS,CAAC8F,QAAQ;UACtC;UACA,IAAI,CAACF,gBAAgB,GAAG5F,SAAS,CAACW,OAAO;QAC7C;QACA,IAAI,CAACoF,gBAAgB,EAAE;MAC3B;IACJ;IACAC,WAAW,CAACxC,OAAO,EAAE;MACjB;MACA;MACA,IAAIA,OAAO,CAAC,UAAU,CAAC,IAAIA,OAAO,CAAC,qBAAqB,CAAC,EAAE;QACvD,IAAI,CAACvD,YAAY,CAACO,IAAI,EAAE;MAC5B;MACA,IAAIgD,OAAO,CAAC,2BAA2B,CAAC,IAAI,IAAI,CAACyC,WAAW,EAAE;QAC1D,IAAI,CAACA,WAAW,CAACC,aAAa,CAAC,IAAI,CAACrE,0BAA0B,CAAC;MACnE;IACJ;IACAsE,WAAW,GAAG;MACV,IAAI,CAACF,WAAW,EAAEG,OAAO,EAAE;MAC3B,IAAI,CAACtD,QAAQ,CAACtC,IAAI,EAAE;MACpB,IAAI,CAACsC,QAAQ,CAACuD,QAAQ,EAAE;MACxB,IAAI,CAACpG,YAAY,CAACoG,QAAQ,EAAE;IAChC;IACA;IACAC,MAAM,GAAG;MACL,IAAI,CAAC5B,SAAS,GAAG,IAAI,CAAC6B,KAAK,EAAE,GAAG,IAAI,CAACC,IAAI,EAAE;IAC/C;IACA;IACAA,IAAI,GAAG;MACH,IAAI,IAAI,CAACC,QAAQ,EAAE,EAAE;QACjB,IAAI,CAACpG,UAAU,GAAG,IAAI;QACtB,IAAI,CAAC4F,WAAW,CAACS,yBAAyB,CAAC,IAAI,CAAC;QAChD,IAAI,CAACC,uBAAuB,EAAE;QAC9B,IAAI,CAACzE,kBAAkB,CAAC0E,YAAY,EAAE;MAC1C;IACJ;IACA;IACAL,KAAK,GAAG;MACJ,IAAI,IAAI,CAAClG,UAAU,EAAE;QACjB,IAAI,CAACA,UAAU,GAAG,KAAK;QACvB,IAAI,CAAC4F,WAAW,CAACS,yBAAyB,CAAC,IAAI,CAACG,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,CAAC;QACzE,IAAI,CAAC3E,kBAAkB,CAAC0E,YAAY,EAAE;QACtC,IAAI,CAAC7D,UAAU,EAAE;MACrB;IACJ;IACA;AACJ;AACA;AACA;AACA;AACA;IACI+D,UAAU,CAACpH,KAAK,EAAE;MACd,IAAI,CAACgC,YAAY,CAAChC,KAAK,CAAC;IAC5B;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;IACIqH,gBAAgB,CAAC1F,EAAE,EAAE;MACjB,IAAI,CAACM,SAAS,GAAGN,EAAE;IACvB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI2F,iBAAiB,CAAC3F,EAAE,EAAE;MAClB,IAAI,CAAC0B,UAAU,GAAG1B,EAAE;IACxB;IACA;AACJ;AACA;AACA;AACA;AACA;IACI4F,gBAAgB,CAACC,UAAU,EAAE;MACzB,IAAI,CAACpB,QAAQ,GAAGoB,UAAU;MAC1B,IAAI,CAAChF,kBAAkB,CAAC0E,YAAY,EAAE;MACtC,IAAI,CAAC3G,YAAY,CAACO,IAAI,EAAE;IAC5B;IACA;IACA,IAAIkE,SAAS,GAAG;MACZ,OAAO,IAAI,CAACrE,UAAU;IAC1B;IACA;IACA,IAAI8G,QAAQ,GAAG;MACX,OAAO,IAAI,CAACtG,QAAQ,GAAG,IAAI,CAACE,eAAe,EAAEoG,QAAQ,IAAI,EAAE,GAAG,IAAI,CAACpG,eAAe,EAAEoG,QAAQ,CAAC,CAAC,CAAC;IACnG;IACA;IACA,IAAIC,YAAY,GAAG;MACf,IAAI,IAAI,CAACC,KAAK,EAAE;QACZ,OAAO,EAAE;MACb;MACA,IAAI,IAAI,CAACvG,SAAS,EAAE;QAChB,MAAMwG,eAAe,GAAG,IAAI,CAACvG,eAAe,CAACoG,QAAQ,CAAC5J,GAAG,CAACmG,MAAM,IAAIA,MAAM,CAAC6D,SAAS,CAAC;QACrF,IAAI,IAAI,CAACV,MAAM,EAAE,EAAE;UACfS,eAAe,CAACE,OAAO,EAAE;QAC7B;QACA;QACA,OAAOF,eAAe,CAACG,IAAI,CAAC,IAAI,CAAC;MACrC;MACA,OAAO,IAAI,CAAC1G,eAAe,CAACoG,QAAQ,CAAC,CAAC,CAAC,CAACI,SAAS;IACrD;IACA;IACAV,MAAM,GAAG;MACL,OAAO,IAAI,CAACxE,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC3C,KAAK,KAAK,KAAK,GAAG,KAAK;IACxD;IACA;IACAgI,cAAc,CAAC5C,KAAK,EAAE;MAClB,IAAI,CAAC,IAAI,CAACgB,QAAQ,EAAE;QAChB,IAAI,CAACpB,SAAS,GAAG,IAAI,CAACiD,kBAAkB,CAAC7C,KAAK,CAAC,GAAG,IAAI,CAAC8C,oBAAoB,CAAC9C,KAAK,CAAC;MACtF;IACJ;IACA;IACA8C,oBAAoB,CAAC9C,KAAK,EAAE;MACxB,MAAM+C,OAAO,GAAG/C,KAAK,CAAC+C,OAAO;MAC7B,MAAMC,UAAU,GAAGD,OAAO,KAAKvL,UAAU,IACrCuL,OAAO,KAAKtL,QAAQ,IACpBsL,OAAO,KAAKrL,UAAU,IACtBqL,OAAO,KAAKpL,WAAW;MAC3B,MAAMsL,SAAS,GAAGF,OAAO,KAAKnL,KAAK,IAAImL,OAAO,KAAKlL,KAAK;MACxD,MAAMqL,OAAO,GAAG,IAAI,CAAC/B,WAAW;MAChC;MACA,IAAK,CAAC+B,OAAO,CAACC,QAAQ,EAAE,IAAIF,SAAS,IAAI,CAACnL,cAAc,CAACkI,KAAK,CAAC,IAC1D,CAAC,IAAI,CAACjE,QAAQ,IAAIiE,KAAK,CAACoD,MAAM,KAAKJ,UAAW,EAAE;QACjDhD,KAAK,CAACqD,cAAc,EAAE,CAAC,CAAC;QACxB,IAAI,CAAC3B,IAAI,EAAE;MACf,CAAC,MACI,IAAI,CAAC,IAAI,CAAC3F,QAAQ,EAAE;QACrB,MAAMuH,wBAAwB,GAAG,IAAI,CAACjB,QAAQ;QAC9Ca,OAAO,CAACK,SAAS,CAACvD,KAAK,CAAC;QACxB,MAAMwD,cAAc,GAAG,IAAI,CAACnB,QAAQ;QACpC;QACA,IAAImB,cAAc,IAAIF,wBAAwB,KAAKE,cAAc,EAAE;UAC/D;UACA;UACA,IAAI,CAAC7F,cAAc,CAAC8F,QAAQ,CAACD,cAAc,CAACf,SAAS,EAAE,KAAK,CAAC;QACjE;MACJ;IACJ;IACA;IACAI,kBAAkB,CAAC7C,KAAK,EAAE;MACtB,MAAMkD,OAAO,GAAG,IAAI,CAAC/B,WAAW;MAChC,MAAM4B,OAAO,GAAG/C,KAAK,CAAC+C,OAAO;MAC7B,MAAMC,UAAU,GAAGD,OAAO,KAAKvL,UAAU,IAAIuL,OAAO,KAAKtL,QAAQ;MACjE,MAAM0L,QAAQ,GAAGD,OAAO,CAACC,QAAQ,EAAE;MACnC,IAAIH,UAAU,IAAIhD,KAAK,CAACoD,MAAM,EAAE;QAC5B;QACApD,KAAK,CAACqD,cAAc,EAAE;QACtB,IAAI,CAAC5B,KAAK,EAAE;QACZ;QACA;MACJ,CAAC,MACI,IAAI,CAAC0B,QAAQ,KACbJ,OAAO,KAAKnL,KAAK,IAAImL,OAAO,KAAKlL,KAAK,CAAC,IACxCqL,OAAO,CAACQ,UAAU,IAClB,CAAC5L,cAAc,CAACkI,KAAK,CAAC,EAAE;QACxBA,KAAK,CAACqD,cAAc,EAAE;QACtBH,OAAO,CAACQ,UAAU,CAACC,qBAAqB,EAAE;MAC9C,CAAC,MACI,IAAI,CAACR,QAAQ,IAAI,IAAI,CAACnH,SAAS,IAAI+G,OAAO,KAAKhL,CAAC,IAAIiI,KAAK,CAAC4D,OAAO,EAAE;QACpE5D,KAAK,CAACqD,cAAc,EAAE;QACtB,MAAMQ,oBAAoB,GAAG,IAAI,CAACpF,OAAO,CAACqF,IAAI,CAACC,GAAG,IAAI,CAACA,GAAG,CAAC/C,QAAQ,IAAI,CAAC+C,GAAG,CAAC1B,QAAQ,CAAC;QACrF,IAAI,CAAC5D,OAAO,CAACyB,OAAO,CAACtB,MAAM,IAAI;UAC3B,IAAI,CAACA,MAAM,CAACoC,QAAQ,EAAE;YAClB6C,oBAAoB,GAAGjF,MAAM,CAACuB,MAAM,EAAE,GAAGvB,MAAM,CAACyB,QAAQ,EAAE;UAC9D;QACJ,CAAC,CAAC;MACN,CAAC,MACI;QACD,MAAM2D,sBAAsB,GAAGd,OAAO,CAACe,eAAe;QACtDf,OAAO,CAACK,SAAS,CAACvD,KAAK,CAAC;QACxB,IAAI,IAAI,CAAChE,SAAS,IACdgH,UAAU,IACVhD,KAAK,CAACkE,QAAQ,IACdhB,OAAO,CAACQ,UAAU,IAClBR,OAAO,CAACe,eAAe,KAAKD,sBAAsB,EAAE;UACpDd,OAAO,CAACQ,UAAU,CAACC,qBAAqB,EAAE;QAC9C;MACJ;IACJ;IACAQ,QAAQ,GAAG;MACP,IAAI,CAAC,IAAI,CAACnD,QAAQ,EAAE;QAChB,IAAI,CAAC1F,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACH,YAAY,CAACO,IAAI,EAAE;MAC5B;IACJ;IACA;AACJ;AACA;AACA;IACI0I,OAAO,GAAG;MACN,IAAI,CAAC9I,QAAQ,GAAG,KAAK;MACrB,IAAI,CAAC6F,WAAW,EAAEkD,eAAe,EAAE;MACnC,IAAI,CAAC,IAAI,CAACrD,QAAQ,IAAI,CAAC,IAAI,CAACpB,SAAS,EAAE;QACnC,IAAI,CAAC3B,UAAU,EAAE;QACjB,IAAI,CAACb,kBAAkB,CAAC0E,YAAY,EAAE;QACtC,IAAI,CAAC3G,YAAY,CAACO,IAAI,EAAE;MAC5B;IACJ;IACA;AACJ;AACA;IACI4I,WAAW,GAAG;MACV,IAAI,CAACC,WAAW,CAACC,cAAc,CAAC7F,IAAI,CAACpG,IAAI,CAAC,CAAC,CAAC,CAAC,CAACmH,SAAS,CAAC,MAAM;QAC1D,IAAI,CAACtC,kBAAkB,CAACqH,aAAa,EAAE;QACvC,IAAI,CAACC,mBAAmB,EAAE;MAC9B,CAAC,CAAC;IACN;IACA;IACAC,cAAc,GAAG;MACb,OAAO,IAAI,CAACnH,gBAAgB,GAAI,OAAM,IAAI,CAACA,gBAAgB,CAACoH,KAAM,EAAC,GAAG,EAAE;IAC5E;IACA;IACA,IAAIrC,KAAK,GAAG;MACR,OAAO,CAAC,IAAI,CAACtG,eAAe,IAAI,IAAI,CAACA,eAAe,CAAC4I,OAAO,EAAE;IAClE;IACArI,oBAAoB,GAAG;MACnB;MACA;MACAsI,OAAO,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC,MAAM;QACzB,IAAI,IAAI,CAAC9J,SAAS,EAAE;UAChB,IAAI,CAACuB,MAAM,GAAG,IAAI,CAACvB,SAAS,CAACN,KAAK;QACtC;QACA,IAAI,CAACqK,oBAAoB,CAAC,IAAI,CAACxI,MAAM,CAAC;QACtC,IAAI,CAACtB,YAAY,CAACO,IAAI,EAAE;MAC5B,CAAC,CAAC;IACN;IACA;AACJ;AACA;AACA;IACIuJ,oBAAoB,CAACrK,KAAK,EAAE;MACxB,IAAI,CAAC6D,OAAO,CAACyB,OAAO,CAACtB,MAAM,IAAIA,MAAM,CAACsG,iBAAiB,EAAE,CAAC;MAC1D,IAAI,CAACjJ,eAAe,CAACkJ,KAAK,EAAE;MAC5B,IAAI,IAAI,CAACpJ,QAAQ,IAAInB,KAAK,EAAE;QACxB,IAAI,CAACwK,KAAK,CAACC,OAAO,CAACzK,KAAK,CAAC,KAAK,OAAOsB,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;UAC1E,MAAMvC,8BAA8B,EAAE;QAC1C;QACAiB,KAAK,CAACsF,OAAO,CAAEoF,YAAY,IAAK,IAAI,CAACC,oBAAoB,CAACD,YAAY,CAAC,CAAC;QACxE,IAAI,CAACE,WAAW,EAAE;MACtB,CAAC,MACI;QACD,MAAMC,mBAAmB,GAAG,IAAI,CAACF,oBAAoB,CAAC3K,KAAK,CAAC;QAC5D;QACA;QACA,IAAI6K,mBAAmB,EAAE;UACrB,IAAI,CAACtE,WAAW,CAACuE,gBAAgB,CAACD,mBAAmB,CAAC;QAC1D,CAAC,MACI,IAAI,CAAC,IAAI,CAAC7F,SAAS,EAAE;UACtB;UACA;UACA,IAAI,CAACuB,WAAW,CAACuE,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACzC;MACJ;MACA,IAAI,CAACtI,kBAAkB,CAAC0E,YAAY,EAAE;IAC1C;IACA;AACJ;AACA;AACA;IACIyD,oBAAoB,CAAC3K,KAAK,EAAE;MACxB,MAAM6K,mBAAmB,GAAG,IAAI,CAAChH,OAAO,CAACkH,IAAI,CAAE/G,MAAM,IAAK;QACtD;QACA;QACA,IAAI,IAAI,CAAC3C,eAAe,CAAC2J,UAAU,CAAChH,MAAM,CAAC,EAAE;UACzC,OAAO,KAAK;QAChB;QACA,IAAI;UACA;UACA,OAAOA,MAAM,CAAChE,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC0B,YAAY,CAACsC,MAAM,CAAChE,KAAK,EAAEA,KAAK,CAAC;QACzE,CAAC,CACD,OAAOiL,KAAK,EAAE;UACV,IAAI,OAAO3J,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;YAC/C;YACA4J,OAAO,CAACC,IAAI,CAACF,KAAK,CAAC;UACvB;UACA,OAAO,KAAK;QAChB;MACJ,CAAC,CAAC;MACF,IAAIJ,mBAAmB,EAAE;QACrB,IAAI,CAACxJ,eAAe,CAACkE,MAAM,CAACsF,mBAAmB,CAAC;MACpD;MACA,OAAOA,mBAAmB;IAC9B;IACA;IACA7I,YAAY,CAACF,QAAQ,EAAE;MACnB;MACA,IAAIA,QAAQ,KAAK,IAAI,CAACD,MAAM,IAAK,IAAI,CAACT,SAAS,IAAIoJ,KAAK,CAACC,OAAO,CAAC3I,QAAQ,CAAE,EAAE;QACzE,IAAI,IAAI,CAAC+B,OAAO,EAAE;UACd,IAAI,CAACwG,oBAAoB,CAACvI,QAAQ,CAAC;QACvC;QACA,IAAI,CAACD,MAAM,GAAGC,QAAQ;QACtB,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB;IACA;IACAoD,eAAe,GAAG;MACd,IAAI,CAACqB,WAAW,GAAG,IAAIhK,0BAA0B,CAAC,IAAI,CAACsH,OAAO,CAAC,CAC1D2C,aAAa,CAAC,IAAI,CAACrE,0BAA0B,CAAC,CAC9CiJ,uBAAuB,EAAE,CACzBpE,yBAAyB,CAAC,IAAI,CAACG,MAAM,EAAE,GAAG,KAAK,GAAG,KAAK,CAAC,CACxDkE,cAAc,EAAE,CAChBC,cAAc,EAAE,CAChBC,uBAAuB,CAAC,CAAC,UAAU,CAAC,CAAC;MAC1C,IAAI,CAAChF,WAAW,CAACiF,MAAM,CAAC1G,SAAS,CAAC,MAAM;QACpC,IAAI,IAAI,CAACE,SAAS,EAAE;UAChB;UACA;UACA,IAAI,CAAC,IAAI,CAAC7D,QAAQ,IAAI,IAAI,CAACoF,WAAW,CAACuC,UAAU,EAAE;YAC/C,IAAI,CAACvC,WAAW,CAACuC,UAAU,CAACC,qBAAqB,EAAE;UACvD;UACA;UACA;UACA,IAAI,CAAC0C,KAAK,EAAE;UACZ,IAAI,CAAC5E,KAAK,EAAE;QAChB;MACJ,CAAC,CAAC;MACF,IAAI,CAACN,WAAW,CAACmF,MAAM,CAAC5G,SAAS,CAAC,MAAM;QACpC,IAAI,IAAI,CAACnE,UAAU,IAAI,IAAI,CAACgL,KAAK,EAAE;UAC/B,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACrF,WAAW,CAAC8C,eAAe,IAAI,CAAC,CAAC;QACrE,CAAC,MACI,IAAI,CAAC,IAAI,CAAC1I,UAAU,IAAI,CAAC,IAAI,CAACQ,QAAQ,IAAI,IAAI,CAACoF,WAAW,CAACuC,UAAU,EAAE;UACxE,IAAI,CAACvC,WAAW,CAACuC,UAAU,CAACC,qBAAqB,EAAE;QACvD;MACJ,CAAC,CAAC;IACN;IACA;IACArD,aAAa,GAAG;MACZ,MAAMmG,kBAAkB,GAAGrO,KAAK,CAAC,IAAI,CAACqG,OAAO,CAACC,OAAO,EAAE,IAAI,CAACV,QAAQ,CAAC;MACrE,IAAI,CAACQ,sBAAsB,CAACG,IAAI,CAAChG,SAAS,CAAC8N,kBAAkB,CAAC,CAAC,CAAC/G,SAAS,CAACM,KAAK,IAAI;QAC/E,IAAI,CAAC0G,SAAS,CAAC1G,KAAK,CAACrF,MAAM,EAAEqF,KAAK,CAAC2G,WAAW,CAAC;QAC/C,IAAI3G,KAAK,CAAC2G,WAAW,IAAI,CAAC,IAAI,CAAC5K,QAAQ,IAAI,IAAI,CAACR,UAAU,EAAE;UACxD,IAAI,CAACkG,KAAK,EAAE;UACZ,IAAI,CAAC4E,KAAK,EAAE;QAChB;MACJ,CAAC,CAAC;MACF;MACA;MACAjO,KAAK,CAAC,GAAG,IAAI,CAACqG,OAAO,CAAChG,GAAG,CAACmG,MAAM,IAAIA,MAAM,CAACgI,aAAa,CAAC,CAAC,CACrDjI,IAAI,CAAChG,SAAS,CAAC8N,kBAAkB,CAAC,CAAC,CACnC/G,SAAS,CAAC,MAAM;QACjB;QACA;QACA;QACA,IAAI,CAACtC,kBAAkB,CAACqH,aAAa,EAAE;QACvC,IAAI,CAACtJ,YAAY,CAACO,IAAI,EAAE;MAC5B,CAAC,CAAC;IACN;IACA;IACAgL,SAAS,CAAC9H,MAAM,EAAE+H,WAAW,EAAE;MAC3B,MAAME,WAAW,GAAG,IAAI,CAAC5K,eAAe,CAAC2J,UAAU,CAAChH,MAAM,CAAC;MAC3D,IAAIA,MAAM,CAAChE,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,CAACoB,SAAS,EAAE;QACzC4C,MAAM,CAACyB,QAAQ,EAAE;QACjB,IAAI,CAACpE,eAAe,CAACkJ,KAAK,EAAE;QAC5B,IAAI,IAAI,CAACvK,KAAK,IAAI,IAAI,EAAE;UACpB,IAAI,CAACkM,iBAAiB,CAAClI,MAAM,CAAChE,KAAK,CAAC;QACxC;MACJ,CAAC,MACI;QACD,IAAIiM,WAAW,KAAKjI,MAAM,CAACyD,QAAQ,EAAE;UACjCzD,MAAM,CAACyD,QAAQ,GACT,IAAI,CAACpG,eAAe,CAACkE,MAAM,CAACvB,MAAM,CAAC,GACnC,IAAI,CAAC3C,eAAe,CAACoE,QAAQ,CAACzB,MAAM,CAAC;QAC/C;QACA,IAAI+H,WAAW,EAAE;UACb,IAAI,CAACxF,WAAW,CAAC4F,aAAa,CAACnI,MAAM,CAAC;QAC1C;QACA,IAAI,IAAI,CAAC7C,QAAQ,EAAE;UACf,IAAI,CAACyJ,WAAW,EAAE;UAClB,IAAImB,WAAW,EAAE;YACb;YACA;YACA;YACA;YACA,IAAI,CAACN,KAAK,EAAE;UAChB;QACJ;MACJ;MACA,IAAIQ,WAAW,KAAK,IAAI,CAAC5K,eAAe,CAAC2J,UAAU,CAAChH,MAAM,CAAC,EAAE;QACzD,IAAI,CAACkI,iBAAiB,EAAE;MAC5B;MACA,IAAI,CAAC3L,YAAY,CAACO,IAAI,EAAE;IAC5B;IACA;IACA8J,WAAW,GAAG;MACV,IAAI,IAAI,CAACzJ,QAAQ,EAAE;QACf,MAAM0C,OAAO,GAAG,IAAI,CAACA,OAAO,CAACuI,OAAO,EAAE;QACtC,IAAI,CAAC/K,eAAe,CAACgL,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAChC,OAAO,IAAI,CAACC,cAAc,GACpB,IAAI,CAACA,cAAc,CAACF,CAAC,EAAEC,CAAC,EAAE1I,OAAO,CAAC,GAClCA,OAAO,CAAC4I,OAAO,CAACH,CAAC,CAAC,GAAGzI,OAAO,CAAC4I,OAAO,CAACF,CAAC,CAAC;QACjD,CAAC,CAAC;QACF,IAAI,CAAChM,YAAY,CAACO,IAAI,EAAE;MAC5B;IACJ;IACA;IACAoL,iBAAiB,CAACQ,aAAa,EAAE;MAC7B,IAAIC,WAAW,GAAG,IAAI;MACtB,IAAI,IAAI,CAACxL,QAAQ,EAAE;QACfwL,WAAW,GAAG,IAAI,CAAClF,QAAQ,CAAC5J,GAAG,CAACmG,MAAM,IAAIA,MAAM,CAAChE,KAAK,CAAC;MAC3D,CAAC,MACI;QACD2M,WAAW,GAAG,IAAI,CAAClF,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACzH,KAAK,GAAG0M,aAAa;MACrE;MACA,IAAI,CAAC7K,MAAM,GAAG8K,WAAW;MACzB,IAAI,CAACnI,WAAW,CAACoI,IAAI,CAACD,WAAW,CAAC;MAClC,IAAI,CAAC1K,SAAS,CAAC0K,WAAW,CAAC;MAC3B,IAAI,CAACpI,eAAe,CAACqI,IAAI,CAAC,IAAI,CAACC,eAAe,CAACF,WAAW,CAAC,CAAC;MAC5D,IAAI,CAACnK,kBAAkB,CAAC0E,YAAY,EAAE;IAC1C;IACA;AACJ;AACA;AACA;IACID,uBAAuB,GAAG;MACtB,IAAI,IAAI,CAACV,WAAW,EAAE;QAClB,IAAI,IAAI,CAACoB,KAAK,EAAE;UACZ,IAAI,CAACpB,WAAW,CAACuG,kBAAkB,EAAE;QACzC,CAAC,MACI;UACD,IAAI,CAACvG,WAAW,CAAC4F,aAAa,CAAC,IAAI,CAAC9K,eAAe,CAACoG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACpE;MACJ;IACJ;IACA;IACAV,QAAQ,GAAG;MACP,OAAO,CAAC,IAAI,CAACpG,UAAU,IAAI,CAAC,IAAI,CAACyF,QAAQ,IAAI,IAAI,CAACvC,OAAO,EAAEkJ,MAAM,GAAG,CAAC;IACzE;IACA;IACAtB,KAAK,CAAC5H,OAAO,EAAE;MACX,IAAI,CAAC3D,WAAW,CAAC6F,aAAa,CAAC0F,KAAK,CAAC5H,OAAO,CAAC;IACjD;IACA;IACAmJ,uBAAuB,GAAG;MACtB,IAAI,IAAI,CAACrJ,SAAS,EAAE;QAChB,OAAO,IAAI;MACf;MACA,MAAMsJ,OAAO,GAAG,IAAI,CAACrK,gBAAgB,EAAEsK,UAAU,EAAE;MACnD,MAAMC,eAAe,GAAGF,OAAO,GAAGA,OAAO,GAAG,GAAG,GAAG,EAAE;MACpD,OAAO,IAAI,CAACG,cAAc,GAAGD,eAAe,GAAG,IAAI,CAACC,cAAc,GAAGH,OAAO;IAChF;IACA;IACAI,wBAAwB,GAAG;MACvB,IAAI,IAAI,CAACrI,SAAS,IAAI,IAAI,CAACuB,WAAW,IAAI,IAAI,CAACA,WAAW,CAACuC,UAAU,EAAE;QACnE,OAAO,IAAI,CAACvC,WAAW,CAACuC,UAAU,CAAC1G,EAAE;MACzC;MACA,OAAO,IAAI;IACf;IACA;IACAyD,yBAAyB,GAAG;MACxB,IAAI,IAAI,CAAClC,SAAS,EAAE;QAChB,OAAO,IAAI;MACf;MACA,MAAMsJ,OAAO,GAAG,IAAI,CAACrK,gBAAgB,EAAEsK,UAAU,EAAE;MACnD,IAAIlN,KAAK,GAAG,CAACiN,OAAO,GAAGA,OAAO,GAAG,GAAG,GAAG,EAAE,IAAI,IAAI,CAAC3J,QAAQ;MAC1D,IAAI,IAAI,CAAC8J,cAAc,EAAE;QACrBpN,KAAK,IAAI,GAAG,GAAG,IAAI,CAACoN,cAAc;MACtC;MACA,OAAOpN,KAAK;IAChB;IACA;IACA+E,mBAAmB,CAACuI,MAAM,EAAE;MACxB,IAAI,CAACnJ,YAAY,CAACyI,IAAI,CAACU,MAAM,CAAC;IAClC;IACA;AACJ;AACA;AACA;IACIC,iBAAiB,CAACC,GAAG,EAAE;MACnB,IAAIA,GAAG,CAACT,MAAM,EAAE;QACZ,IAAI,CAAC7M,WAAW,CAAC6F,aAAa,CAACC,YAAY,CAAC,kBAAkB,EAAEwH,GAAG,CAACzF,IAAI,CAAC,GAAG,CAAC,CAAC;MAClF,CAAC,MACI;QACD,IAAI,CAAC7H,WAAW,CAAC6F,aAAa,CAACE,eAAe,CAAC,kBAAkB,CAAC;MACtE;IACJ;IACA;AACJ;AACA;AACA;IACIwH,gBAAgB,GAAG;MACf,IAAI,CAAChC,KAAK,EAAE;MACZ,IAAI,CAAC3E,IAAI,EAAE;IACf;IACA;AACJ;AACA;AACA;IACI,IAAI4G,gBAAgB,GAAG;MACnB,OAAO,IAAI,CAAC/M,UAAU,IAAI,CAAC,IAAI,CAACgH,KAAK,IAAK,IAAI,CAACjH,QAAQ,IAAI,CAAC,CAAC,IAAI,CAACG,YAAa;IACnF;EACJ;EACAL,cAAc,CAACmN,IAAI;IAAA,iBAA6FnN,cAAc,EAAxBrG,EAAE,mBAAwCiC,EAAE,CAACwR,aAAa,GAA1DzT,EAAE,mBAAqEA,EAAE,CAAC0T,iBAAiB,GAA3F1T,EAAE,mBAAsGA,EAAE,CAAC2T,MAAM,GAAjH3T,EAAE,mBAA4HiB,EAAE,CAAC2S,iBAAiB,GAAlJ5T,EAAE,mBAA6JA,EAAE,CAAC6T,UAAU,GAA5K7T,EAAE,mBAAuLqC,EAAE,CAACyR,cAAc,MAA1M9T,EAAE,mBAAqOiD,EAAE,CAAC8Q,MAAM,MAAhP/T,EAAE,mBAA2QiD,EAAE,CAAC+Q,kBAAkB,MAAlShU,EAAE,mBAA6T8B,cAAc,MAA7U9B,EAAE,mBAAwWiD,EAAE,CAACgR,SAAS,OAAtXjU,EAAE,mBAA6Z,UAAU,GAAzaA,EAAE,mBAAqc+E,0BAA0B,GAAje/E,EAAE,mBAA4emC,EAAE,CAAC+R,aAAa,GAA9flU,EAAE,mBAAygBoF,iBAAiB;EAAA,CAA4D;EAC9rBiB,cAAc,CAAC8N,IAAI,kBADmFnU,EAAE;IAAA,MACJqG,cAAc;IAAA;MAAA;QADZrG,EAAE;QAAFA,EAAE;QAAFA,EAAE,aAC64BL,mBAAmB;MAAA;MAAA;QAAA;QADl6BK,EAAE,qBAAFA,EAAE;QAAFA,EAAE,qBAAFA,EAAE;QAAFA,EAAE,qBAAFA,EAAE;MAAA;IAAA;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAA,WAAFA,EAAE,6BAAFA,EAAE;EAAA,EACm/B;EAAC,OAzrBtlCqG,cAAc;AAAA;AA0rBpB;EAAA;AAAA;AAiFA;AACA;AACA;AAFA,IAGM+N,gBAAgB;EAAtB,MAAMA,gBAAgB,CAAC;EAEvBA,gBAAgB,CAACZ,IAAI;IAAA,iBAA6FY,gBAAgB;EAAA,CAAmD;EACrLA,gBAAgB,CAACD,IAAI,kBAzFiFnU,EAAE;IAAA,MAyFFoU,gBAAgB;IAAA;IAAA,WAzFhBpU,EAAE,oBAyF2D,CAAC;MAAEsF,OAAO,EAAEG,kBAAkB;MAAE4O,WAAW,EAAED;IAAiB,CAAC,CAAC;EAAA,EAAiB;EAAC,OAH/OA,gBAAgB;AAAA;AAItB;EAAA;AAAA;AAMc,IACRE,SAAS;EAAf,MAAMA,SAAS,SAASjO,cAAc,CAAC;IACnCV,WAAW,GAAG;MACV,KAAK,CAAC,GAAG4O,SAAS,CAAC;MACnB,IAAI,CAACC,UAAU,GAAG,CACd;QACIC,OAAO,EAAE,OAAO;QAChBC,OAAO,EAAE,QAAQ;QACjBC,QAAQ,EAAE,OAAO;QACjBC,QAAQ,EAAE;MACd,CAAC,EACD;QACIH,OAAO,EAAE,OAAO;QAChBC,OAAO,EAAE,KAAK;QACdC,QAAQ,EAAE,OAAO;QACjBC,QAAQ,EAAE,QAAQ;QAClBC,UAAU,EAAE;MAChB,CAAC,CACJ;MACD,IAAI,CAACC,6BAA6B,GAAG,IAAI,CAACjM,eAAe,EAAEkM,4BAA4B,IAAI,KAAK;IACpG;IACA,IAAIxB,gBAAgB,GAAG;MACnB;MACA;MACA,OAAO,IAAI,CAAC1I,SAAS,IAAI,CAAC,IAAI,CAAC2C,KAAK,IAAK,IAAI,CAAClH,OAAO,IAAI,CAAC,CAAC,IAAI,CAACG,WAAY;IAChF;IACAiE,QAAQ,GAAG;MACP,KAAK,CAACA,QAAQ,EAAE;MAChB,IAAI,CAACtC,cAAc,CACdmJ,MAAM,EAAE,CACR3H,IAAI,CAAChG,SAAS,CAAC,IAAI,CAACqF,QAAQ,CAAC,CAAC,CAC9B0B,SAAS,CAAC,MAAM;QACjB,IAAI,IAAI,CAACE,SAAS,EAAE;UAChB,IAAI,CAACmK,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAE;UAC5C,IAAI,CAAC5M,kBAAkB,CAACqH,aAAa,EAAE;QAC3C;MACJ,CAAC,CAAC;IACN;IACAwF,eAAe,GAAG;MACd;MACA;MACA,IAAI,IAAI,CAACzM,gBAAgB,EAAE;QACvB,IAAI,CAAC0M,uBAAuB,GAAG,IAAI,CAAC1M,gBAAgB,CAAC2M,yBAAyB,EAAE;MACpF;IACJ;IACAzI,IAAI,GAAG;MACH,IAAI,CAACqI,aAAa,GAAG,IAAI,CAACC,gBAAgB,EAAE;MAC5C,KAAK,CAACtI,IAAI,EAAE;MACZ;MACA,IAAI,CAACvG,YAAY,CAACO,IAAI,EAAE;IAC5B;IACA+F,KAAK,GAAG;MACJ,KAAK,CAACA,KAAK,EAAE;MACb;MACA,IAAI,CAACtG,YAAY,CAACO,IAAI,EAAE;IAC5B;IACA;IACA8K,qBAAqB,CAAC4D,KAAK,EAAE;MACzB,MAAMxL,MAAM,GAAG,IAAI,CAACH,OAAO,CAACuI,OAAO,EAAE,CAACoD,KAAK,CAAC;MAC5C,IAAIxL,MAAM,EAAE;QACR,MAAM2H,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC5F,aAAa;QACtC,MAAM0J,UAAU,GAAGhU,6BAA6B,CAAC+T,KAAK,EAAE,IAAI,CAAC3L,OAAO,EAAE,IAAI,CAAC6L,YAAY,CAAC;QACxF,MAAM5J,OAAO,GAAG9B,MAAM,CAAC2L,eAAe,EAAE;QACxC,IAAIH,KAAK,KAAK,CAAC,IAAIC,UAAU,KAAK,CAAC,EAAE;UACjC;UACA;UACA;UACA9D,KAAK,CAACiE,SAAS,GAAG,CAAC;QACvB,CAAC,MACI;UACDjE,KAAK,CAACiE,SAAS,GAAGlU,wBAAwB,CAACoK,OAAO,CAAC+J,SAAS,EAAE/J,OAAO,CAACgK,YAAY,EAAEnE,KAAK,CAACiE,SAAS,EAAEjE,KAAK,CAACmE,YAAY,CAAC;QAC5H;MACJ;IACJ;IACAhG,mBAAmB,GAAG;MAClB,IAAI,CAAC8B,qBAAqB,CAAC,IAAI,CAACrF,WAAW,CAAC8C,eAAe,IAAI,CAAC,CAAC;IACrE;IACAwD,eAAe,CAAC7M,KAAK,EAAE;MACnB,OAAO,IAAIH,eAAe,CAAC,IAAI,EAAEG,KAAK,CAAC;IAC3C;IACA;IACAoP,gBAAgB,GAAG;MACf,MAAMW,YAAY,GAAG,IAAI,CAACT,uBAAuB,YAAYvV,gBAAgB,GACvE,IAAI,CAACuV,uBAAuB,CAAC5M,UAAU,GACvC,IAAI,CAAC4M,uBAAuB,IAAI,IAAI,CAACpP,WAAW;MACtD,OAAO6P,YAAY,CAAChK,aAAa,CAACiK,qBAAqB,EAAE,CAACC,KAAK;IACnE;IACA;IACA,IAAIf,4BAA4B,GAAG;MAC/B,OAAO,IAAI,CAACD,6BAA6B;IAC7C;IACA,IAAIC,4BAA4B,CAAClP,KAAK,EAAE;MACpC,IAAI,CAACiP,6BAA6B,GAAGxS,qBAAqB,CAACuD,KAAK,CAAC;MACjE,IAAI,CAACkQ,qBAAqB,EAAE;IAChC;IACA;IACAA,qBAAqB,GAAG;MACpB,IAAI,IAAI,CAACrM,OAAO,EAAE;QACd,KAAK,MAAMG,MAAM,IAAI,IAAI,CAACH,OAAO,EAAE;UAC/BG,MAAM,CAACxB,kBAAkB,CAAC0E,YAAY,EAAE;QAC5C;MACJ;IACJ;EACJ;EACAuH,SAAS,CAACd,IAAI;IAAA;IAAA;MAAA,4DAxMwFxT,EAAE,uBAwMGsU,SAAS,SAATA,SAAS;IAAA;EAAA,GAAqD;EACzKA,SAAS,CAAC0B,IAAI,kBAzMwFhW,EAAE;IAAA,MAyMTsU,SAAS;IAAA;IAAA;MAAA;QAzMFtU,EAAE,0BA4M9ByF,kBAAkB;QA5MUzF,EAAE,0BA4MiDyB,SAAS;QA5M5DzB,EAAE,0BA4M4H0B,YAAY;MAAA;MAAA;QAAA;QA5M1I1B,EAAE,qBAAFA,EAAE;QAAFA,EAAE,qBAAFA,EAAE;QAAFA,EAAE,qBAAFA,EAAE;MAAA;IAAA;IAAA,oBAyM8M,UAAU,uBAAuB,MAAM,mBAAmB,SAAS;IAAA;IAAA;MAAA;QAzMnRA,EAAE;UAAA,OAyMT,0BAAsB;QAAA;UAAA,OAAtB,cAAU;QAAA;UAAA,OAAV,aAAS;QAAA;MAAA;MAAA;QAzMFA,EAAE;QAAFA,EAAE;MAAA;IAAA;IAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAA;IAAA,WAAFA,EAAE,oBAyM8/B,CAC9lC;MAAEsF,OAAO,EAAEvD,mBAAmB;MAAEsS,WAAW,EAAEC;IAAU,CAAC,EACxD;MAAEhP,OAAO,EAAE9D,2BAA2B;MAAE6S,WAAW,EAAEC;IAAU,CAAC,CACnE,GA5MiGtU,EAAE;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAFA,EAAE;QAAFA,EAAE,+BA4MqhC;QA5MvhCA,EAAE;UAAA,OA4My8B,YAAQ;QAAA,EAAE;QA5Mr9BA,EAAE,4BA4MymC;QA5M3mCA,EAAE,0DA4M+tC;QA5MjuCA,EAAE,0DA4MigD;QA5MngDA,EAAE,eA4M2gD;QA5M7gDA,EAAE,4BA4M6jD;QA5M/jDA,EAAE,iBA4MmyD;QA5MryDA,EAAE,4BA4MmyD;QA5MryDA,EAAE,wBA4My0D;QA5M30DA,EAAE,eA4Mu1D;QA5Mz1DA,EAAE,0EA4MqiG;QA5MviGA,EAAE;UAAA,OA4Mu5E,WAAO;QAAA,EAAE;UAAA,OAAe,iBAAa;QAAA,EAA5B;UAAA,OAA6C,WAAO;QAAA,EAApD;MAAA;MAAA;QAAA,YA5Ml6EA,EAAE;QAAFA,EAAE,mEA4Mi5B;QA5Mn5BA,EAAE,aA4MilC;QA5MnlCA,EAAE,kCA4MilC;QA5MnlCA,EAAE,gCA4MwmC;QA5M1mCA,EAAE,aA4MssC;QA5MxsCA,EAAE,iCA4MssC;QA5MxsCA,EAAE,aA4MoyC;QA5MtyCA,EAAE,kCA4MoyC;QA5MtyCA,EAAE,aA4MsmE;QA5MxmEA,EAAE,oEA4MsmE;MAAA;IAAA;IAAA,eAAqmJF,EAAE,CAACmW,OAAO,EAAoFnW,EAAE,CAACoW,QAAQ,EAA6EpW,EAAE,CAACqW,YAAY,EAAqFrW,EAAE,CAACsW,eAAe,EAA8D3W,EAAE,CAACE,mBAAmB,EAAk8BF,EAAE,CAACG,gBAAgB;IAAA;IAAA;IAAA;MAAA,WAAyH,CAACwE,mBAAmB,CAACG,cAAc;IAAC;IAAA;EAAA,EAAiG;EAAC,OA3Gj4Q+P,SAAS;AAAA;AA4Gf;EAAA;AAAA;;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOM+B,eAAe;EAArB,MAAMA,eAAe,CAAC;EAEtBA,eAAe,CAAC7C,IAAI;IAAA,iBAA6F6C,eAAe;EAAA,CAAkD;EAClLA,eAAe,CAACC,IAAI,kBAhQkFtW,EAAE;IAAA,MAgQUqW;EAAe,EAKtG;EAC3BA,eAAe,CAACE,IAAI,kBAtQkFvW,EAAE;IAAA,WAsQsC,CAACqF,mCAAmC,CAAC;IAAA,UAAYtF,YAAY,EAAEF,aAAa,EAAE8B,eAAe,EAAEC,eAAe,EAAEM,mBAAmB,EACzQF,kBAAkB,EAClBL,eAAe,EACfC,eAAe;EAAA,EAAI;EAAC,OAZtByU,eAAe;AAAA;AAarB;EAAA;AAAA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASjR,iBAAiB,EAAEL,0BAA0B,EAAEM,mCAAmC,EAAEL,2CAA2C,EAAES,kBAAkB,EAAE6O,SAAS,EAAE5O,eAAe,EAAE2Q,eAAe,EAAEjC,gBAAgB,EAAE/N,cAAc,EAAEjC,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}