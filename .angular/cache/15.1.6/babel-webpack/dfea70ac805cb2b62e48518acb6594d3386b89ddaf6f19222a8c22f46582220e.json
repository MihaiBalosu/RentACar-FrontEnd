{"ast":null,"code":"import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nlet AutofillMonitor = /*#__PURE__*/(() => {\n  class AutofillMonitor {\n    constructor(_platform, _ngZone) {\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n      if (!this._platform.isBrowser) {\n        return EMPTY;\n      }\n      const element = coerceElement(elementOrRef);\n      const info = this._monitoredElements.get(element);\n      if (info) {\n        return info.subject;\n      }\n      const result = new Subject();\n      const cssClass = 'cdk-text-field-autofilled';\n      const listener = event => {\n        // Animation events fire on initial element render, we check for the presence of the autofill\n        // CSS class to make sure this is a real change in state, not just the initial render before\n        // we fire off events.\n        if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n          element.classList.add(cssClass);\n          this._ngZone.run(() => result.next({\n            target: event.target,\n            isAutofilled: true\n          }));\n        } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n          element.classList.remove(cssClass);\n          this._ngZone.run(() => result.next({\n            target: event.target,\n            isAutofilled: false\n          }));\n        }\n      };\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('animationstart', listener, listenerOptions);\n        element.classList.add('cdk-text-field-autofill-monitored');\n      });\n      this._monitoredElements.set(element, {\n        subject: result,\n        unlisten: () => {\n          element.removeEventListener('animationstart', listener, listenerOptions);\n        }\n      });\n      return result;\n    }\n    stopMonitoring(elementOrRef) {\n      const element = coerceElement(elementOrRef);\n      const info = this._monitoredElements.get(element);\n      if (info) {\n        info.unlisten();\n        info.subject.complete();\n        element.classList.remove('cdk-text-field-autofill-monitored');\n        element.classList.remove('cdk-text-field-autofilled');\n        this._monitoredElements.delete(element);\n      }\n    }\n    ngOnDestroy() {\n      this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n  }\n  AutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n    return new (t || AutofillMonitor)(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone));\n  };\n  AutofillMonitor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AutofillMonitor,\n    factory: AutofillMonitor.ɵfac,\n    providedIn: 'root'\n  });\n  return AutofillMonitor;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** A directive that can be used to monitor the autofill state of an input. */\nlet CdkAutofill = /*#__PURE__*/(() => {\n  class CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n      this._elementRef = _elementRef;\n      this._autofillMonitor = _autofillMonitor;\n      /** Emits when the autofill state of the element changes. */\n      this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n      this._autofillMonitor.monitor(this._elementRef).subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n      this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n  CdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n    return new (t || CdkAutofill)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(AutofillMonitor));\n  };\n  CdkAutofill.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkAutofill,\n    selectors: [[\"\", \"cdkAutofill\", \"\"]],\n    outputs: {\n      cdkAutofill: \"cdkAutofill\"\n    }\n  });\n  return CdkAutofill;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nlet CdkTextareaAutosize = /*#__PURE__*/(() => {\n  class CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n      return this._minRows;\n    }\n    set minRows(value) {\n      this._minRows = coerceNumberProperty(value);\n      this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n      return this._maxRows;\n    }\n    set maxRows(value) {\n      this._maxRows = coerceNumberProperty(value);\n      this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n      return this._enabled;\n    }\n    set enabled(value) {\n      value = coerceBooleanProperty(value);\n      // Only act if the actual value changed. This specifically helps to not run\n      // resizeToFitContent too early (i.e. before ngAfterViewInit)\n      if (this._enabled !== value) {\n        (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n      }\n    }\n    get placeholder() {\n      return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n      this._cachedPlaceholderHeight = undefined;\n      if (value) {\n        this._textareaElement.setAttribute('placeholder', value);\n      } else {\n        this._textareaElement.removeAttribute('placeholder');\n      }\n      this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, /** @breaking-change 11.0.0 make document required */\n    document) {\n      this._elementRef = _elementRef;\n      this._platform = _platform;\n      this._ngZone = _ngZone;\n      this._destroyed = new Subject();\n      this._enabled = true;\n      /**\n       * Value of minRows as of last resize. If the minRows has decreased, the\n       * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n       * does not have the same problem because it does not affect the textarea's scrollHeight.\n       */\n      this._previousMinRows = -1;\n      this._isViewInited = false;\n      /** Handles `focus` and `blur` events. */\n      this._handleFocusEvent = event => {\n        this._hasFocus = event.type === 'focus';\n      };\n      this._document = document;\n      this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n      const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n      if (minHeight) {\n        this._textareaElement.style.minHeight = minHeight;\n      }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n      const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n      if (maxHeight) {\n        this._textareaElement.style.maxHeight = maxHeight;\n      }\n    }\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        // Remember the height which we started with in case autosizing is disabled\n        this._initialHeight = this._textareaElement.style.height;\n        this.resizeToFitContent();\n        this._ngZone.runOutsideAngular(() => {\n          const window = this._getWindow();\n          fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(this._destroyed)).subscribe(() => this.resizeToFitContent(true));\n          this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n          this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n        });\n        this._isViewInited = true;\n        this.resizeToFitContent(true);\n      }\n    }\n    ngOnDestroy() {\n      this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n      this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n      if (this._cachedLineHeight) {\n        return;\n      }\n      // Use a clone element because we have to override some styles.\n      let textareaClone = this._textareaElement.cloneNode(false);\n      textareaClone.rows = 1;\n      // Use `position: absolute` so that this doesn't cause a browser layout and use\n      // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n      // would affect the height.\n      textareaClone.style.position = 'absolute';\n      textareaClone.style.visibility = 'hidden';\n      textareaClone.style.border = 'none';\n      textareaClone.style.padding = '0';\n      textareaClone.style.height = '';\n      textareaClone.style.minHeight = '';\n      textareaClone.style.maxHeight = '';\n      // In Firefox it happens that textarea elements are always bigger than the specified amount\n      // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n      // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n      // to hidden. This ensures that there is no invalid calculation of the line height.\n      // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n      textareaClone.style.overflow = 'hidden';\n      this._textareaElement.parentNode.appendChild(textareaClone);\n      this._cachedLineHeight = textareaClone.clientHeight;\n      textareaClone.remove();\n      // Min and max heights have to be re-calculated if the cached line height changes\n      this._setMinHeight();\n      this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n      const element = this._textareaElement;\n      const previousMargin = element.style.marginBottom || '';\n      const isFirefox = this._platform.FIREFOX;\n      const needsMarginFiller = isFirefox && this._hasFocus;\n      const measuringClass = isFirefox ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring';\n      // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n      // work around it by assigning a temporary margin with the same height as the `textarea` so that\n      // it occupies the same amount of space. See #23233.\n      if (needsMarginFiller) {\n        element.style.marginBottom = `${element.clientHeight}px`;\n      }\n      // Reset the textarea height to auto in order to shrink back to its default size.\n      // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n      element.classList.add(measuringClass);\n      // The measuring class includes a 2px padding to workaround an issue with Chrome,\n      // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n      const scrollHeight = element.scrollHeight - 4;\n      element.classList.remove(measuringClass);\n      if (needsMarginFiller) {\n        element.style.marginBottom = previousMargin;\n      }\n      return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n      if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n        return;\n      }\n      if (!this.placeholder) {\n        this._cachedPlaceholderHeight = 0;\n        return;\n      }\n      const value = this._textareaElement.value;\n      this._textareaElement.value = this._textareaElement.placeholder;\n      this._cachedPlaceholderHeight = this._measureScrollHeight();\n      this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n      if (this._platform.isBrowser) {\n        this.resizeToFitContent();\n      }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n      // If autosizing is disabled, just skip everything else\n      if (!this._enabled) {\n        return;\n      }\n      this._cacheTextareaLineHeight();\n      this._cacheTextareaPlaceholderHeight();\n      // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n      // in checking the height of the textarea.\n      if (!this._cachedLineHeight) {\n        return;\n      }\n      const textarea = this._elementRef.nativeElement;\n      const value = textarea.value;\n      // Only resize if the value or minRows have changed since these calculations can be expensive.\n      if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n        return;\n      }\n      const scrollHeight = this._measureScrollHeight();\n      const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n      // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n      textarea.style.height = `${height}px`;\n      this._ngZone.runOutsideAngular(() => {\n        if (typeof requestAnimationFrame !== 'undefined') {\n          requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n        } else {\n          setTimeout(() => this._scrollToCaretPosition(textarea));\n        }\n      });\n      this._previousValue = value;\n      this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n      // Do not try to change the textarea, if the initialHeight has not been determined yet\n      // This might potentially remove styles when reset() is called before ngAfterViewInit\n      if (this._initialHeight !== undefined) {\n        this._textareaElement.style.height = this._initialHeight;\n      }\n    }\n    _noopInputHandler() {\n      // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n      return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n      const doc = this._getDocument();\n      return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n      const {\n        selectionStart,\n        selectionEnd\n      } = textarea;\n      // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n      // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n      // between the time we requested the animation frame and when it was executed.\n      // Also note that we have to assert that the textarea is focused before we set the\n      // selection range. Setting the selection range on a non-focused textarea will cause\n      // it to receive focus on IE and Edge.\n      if (!this._destroyed.isStopped && this._hasFocus) {\n        textarea.setSelectionRange(selectionStart, selectionEnd);\n      }\n    }\n  }\n  CdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n    return new (t || CdkTextareaAutosize)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(DOCUMENT, 8));\n  };\n  CdkTextareaAutosize.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkTextareaAutosize,\n    selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n    hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n    hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n          return ctx._noopInputHandler();\n        });\n      }\n    },\n    inputs: {\n      minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n      maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n      enabled: [\"cdkTextareaAutosize\", \"enabled\"],\n      placeholder: \"placeholder\"\n    },\n    exportAs: [\"cdkTextareaAutosize\"]\n  });\n  return CdkTextareaAutosize;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet TextFieldModule = /*#__PURE__*/(() => {\n  class TextFieldModule {}\n  TextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n    return new (t || TextFieldModule)();\n  };\n  TextFieldModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TextFieldModule\n  });\n  TextFieldModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TextFieldModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };","map":{"version":3,"names":["i1","normalizePassiveListenerOptions","i0","Injectable","EventEmitter","Directive","Output","Optional","Inject","Input","NgModule","coerceElement","coerceNumberProperty","coerceBooleanProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","DOCUMENT","listenerOptions","passive","AutofillMonitor","constructor","_platform","_ngZone","_monitoredElements","Map","monitor","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","Platform","NgZone","ɵprov","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","ElementRef","ɵdir","CdkTextareaAutosize","minRows","_minRows","value","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","_enabled","resizeToFitContent","reset","placeholder","_textareaElement","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","document","_destroyed","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","type","_document","nativeElement","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","_initialHeight","height","window","_getWindow","pipe","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","_measureScrollHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","doc","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","TextFieldModule","ɵmod","ɵinj"],"sources":["/Users/balosumihai/Master II/RentACar/RentACar-FrontEnd/node_modules/@angular/cdk/fesm2020/text-field.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nAutofillMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }]; } });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAutofill.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: AutofillMonitor }]; }, propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTextareaAutosize.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: ['cdkTextareaAutosize']\n            }], placeholder: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTextFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\nTextFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: TextFieldModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}